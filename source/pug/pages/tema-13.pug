include ../mixins/functions
+pageHeader("Introducción", "assets/images/header/header_media.svg")

.container#page-introduccion

    .header-ecored
        h2 1.3 Los más nombrados

    .jumbotron.bg-white.mb-0

        p.mb-5 La lista de lenguajes orientados a objetos es larga; sin embargo, por su popularidad, preferencias personales, facilidad de utilización, abundancia de información de referencia, entre otros, naturalmente existen aquellos que son más conocidos, los cuales pueden observarse en la siguiente figura:

        p.text-center.my-6
            img(src="assets/images/pages/tema-1/t13.svg").img-fluid

        p.mt-5 Según Aburruzaga, Medina y Palomo (2006): 

        ul.icon-terminal
            li #[strong C++:] fue inventado por Bjarne Stroustrup mientras trabajaba para los laboratorios Bell de AT&T, en el año 1985 aproximadamente. Su nombre deriva del operador incremento del lenguaje C; se podría decir que C++ es un C incrementado, un paso más en el C. 
            li #[strong C#:] fue creado por Anders Hejlsberg, se trata de una mejora sustancial a los lenguajes que lo preceden C y C++, maneja una sintaxis similar a la de Java y cuenta con una librería de clases muy completa y bien diseñada.

            li #[strong Python:] creado por Guido Van Rossum, consiste en un lenguaje de código abierto y muy fácil de utilizar, no es compilado, sino que trabaja por medio de un intérprete interactivo para mayor facilidad del programador; aunque suele ser mencionado en los estilos de programación orientada a objetos, acepta múltiples paradigmas. 

            li #[strong Java:] creado por James Gosling, guarda grandes parecidos con los lenguajes C y C++, difiere en el hecho de que es completamente orientado a objetos; una de sus bondades es que permite incluir programas directamente en páginas web, lo cual brinda una interesante interactividad entre el usuario y el sistema. 

        p.mt-5 En cuanto a la forma de ejecución del lenguaje, el código fuente se convierte en un código de mayor entendimiento para la máquina llamado bytecodes, los cuales se ejecutan a través del intérprete.

        p.mb-5 Gracias a esta conversión del código a bytecodes, las soluciones programadas bajo este lenguaje son utilizables en cualquier sistema operativo, debido a que esto consiste en un formato entendible por cualquier máquina, sin importar la arquitectura que maneje.

        .subtitulo-guion
            h2 Aplicación   

        p.mt-4 Es un programa grande e independiente que puede ejecutarse directamente en el equipo; las instrucciones de dicho programa son escritas dentro del método principal, adicionalmente, es posible acceder a los archivos del computador y que se ejecuten a través del (JRE) Java Runtime Environment. 

        p Las aplicaciones hechas en Java pueden ser mostradas en pantalla de dos formas: en modo texto haciendo uso del símbolo del sistema, y en modo gráfico, por medio de la clase Frame. 

        p A continuación, se ilustra un ejemplo de una aplicación que devuelve el contenido de una cadena de caracteres, ejecutada en modo texto, y escrita utilizando únicamente el bloc de notas.     

        p.text-center.my-5
            img(src="assets/images/pages/tema-1/t13-aplicacion.svg").img-fluid

        p Una vez digitado el código, se guarda el archivo con el mismo nombre de la clase y con extensión <code>.java</code> en una ruta conocida (la ruta para el ejemplo es <code>D:\CursoJava</code>).

        p Posteriormente, se debe ejecutar dicho archivo con el fin de generar los bytecodes; para ello se abre una ventana del símbolo del sistema, presionando las teclas <b>Win+R</b>, se digita el texto <code>cmd</code> y se presiona el botón Aceptar.

        p Se accede a la ruta donde se grabó el archivo <code>.java</code> y se ejecuta a través del comando <code>javac</code>; las órdenes serían las siguientes:

        ul
            li <code>d:</code> para cambiar al disco D, que es donde está la carpeta requerida.
            li <code>cd CursoJava</code> para entrar a la carpeta.
            li <code>javac Primera.java</code> para generar los bytecodes.

        p En el símbolo del sistema se ve del siguiente modo:

        p.text-center.my-5
            img(src="assets/images/pages/tema-1/t13-terminal-1.svg").img-fluid


        p Abriendo la ruta que contiene el archivo <code>Primera.java</code> se puede observar que luego de ejecutarlo en el símbolo del sistema con el comando <code>javac</code>, apareció un nuevo archivo con extensión <code>.class</code>, dicho archivo es el que contiene los bytecodes.

        p.text-center.my-5
            img(src="assets/images/pages/tema-1/t13-explorador.svg").img-fluid

        p Ahora para obtener el resultado final de la aplicación creada, en el mismo símbolo del sistema, se debe ejecutar el archivo sin extensión, con el comando <code>java</code> e inmediatamente se observa en la siguiente línea, el resultado devuelto.

        p.text-center.my-5
            img(src="assets/images/pages/tema-1/t13-terminal-2.svg").img-fluid

        p Escribir cada línea de código sin ningún tipo de asistente, ayuda al programador a familiarizarse cada vez más con la sintaxis del lenguaje; asimismo, es importante tener en cuenta que existiendo las herramientas que facilitan el proceso, se reduce la posibilidad de errores y se optimiza el tiempo del programador, por lo que vale la pena utilizarlas.

        p Emplear un entorno de desarrollo integrado como por ejemplo NetBeans, hace que el programador no necesite conocer tan al pie de la letra las diferentes secuencias de código que debe ir escribiendo para cada programa, dado que esta herramienta, entre muchas otras facilidades, realiza sugerencias y marca las posibles fallas dentro del código escrito.

        p Para entender mejor lo explicado anteriormente, a continuación, se observa en la siguiente figura, el ejemplo visto con el archivo <code>Primera.java</code> resuelto dentro del NetBeans:

        p.text-center.my-5
            img(src="assets/images/pages/tema-1/t13-netbeans-1.svg").img-fluid

        p Basta con crear un nuevo proyecto, incluir una clase principal y allí escribir el código que imprima el texto; posteriormente se presiona el botón ejecutar y en la parte inferior sale el resultado, es decir que se realizó lo mismo que en el ejemplo con el símbolo del sistema y los comandos <code>javac</code> y <code>java</code>, pero tan solo con presionar un botón, de allí que la recomendación sea utilizar el entorno de desarrollo integrado de NetBeans para la ejecución de este proceso de formación.


        .subtitulo-guion.mt-5
            h2 Applet   

        p.mt-4 Es un programa pequeño que se ejecuta a través de un navegador que sea compatible con Java, se crea utilizando la clase applet; no cuenta con acceso a los archivos del computador y tiene ciertas restricciones, de hecho, ya no es tan utilizado, dado que los navegadores, por seguridad, en múltiples ocasiones, restringen la ejecución de este código.      

        p A continuación, se realiza el ejemplo de la clase <code>Primera.java</code> en forma de applet a través de NetBeans para ver su ejecución en modo gráfico. Los pasos son los siguientes:

        ol.lista
            li Se crea un nuevo proyecto.
            li Se elimina la clase principal creada dado que al programar applets, esta no se necesita.
            li Se crea un formulario JApplet.
            li Se arrastra una etiqueta para escribir el texto.
            li Se ejecuta el applet.

        p.my-5 El código generado y el resultado devuelto  puede observarse en la siguiente figura:

        p.text-center.my-5
            img(src="assets/images/pages/tema-1/t13-netbeans-3.svg").img-fluid

        p.text-center.my-5
            img(src="assets/images/pages/tema-1/t13-netbeans-4.svg").img-fluid

        p Observando entonces el ejemplo anterior, se puede concluir que los procesos de programación de applets y de aplicaciones son mucho más eficientes a través de la utilización de un entorno de desarrollo integrado como el Netbeans, pues en el ejemplo visto, a pesar de tratarse únicamente de la visualización en pantalla de una cadena de texto, se generaron más de 50 líneas de código cuando la única acción que se llevó a cabo fue arrastrar una etiqueta y asignarle un texto. Es posible imaginarse en el caso de la programación de aplicaciones con requerimientos reales, la cantidad de código que tendría que escribirse, y si es en el bloc de notas, no se trataría de ninguna manera de un proceso óptimo y eficiente.
