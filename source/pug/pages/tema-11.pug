include ../mixins/functions
+pageHeader("Introducción", "assets/images/header/header_media.svg")

.container#page-introduccion

    .header-ecored
        h2 1.1 Conceptos básicos


    .jumbotron.bg-white.mb-0

        p.mb-5 Para comprender mejor la programación orientada a objetos, es necesario identificar los conceptos básicos, tal y como se muestran en la siguiente figura:

        p.text-center.my-6
            img(src="assets/images/pages/tema-1/t11.svg").img-fluid

        p.mt-5 Cuando se va a proceder con la programación de un sistema bajo el paradigma orientado a objetos, el primer paso es efectuar algo llamado abstracción, lo cual consiste básicamente en identificar los componentes del sistema, sus características y funcionalidades. Dichos componentes son fácilmente identificables a través del análisis de sustantivos; es decir, analizando aquellos elementos que harán parte del sistema y que pueden definirse como personas, animales o cosas (estos serán los que se denominen objetos).

        p Teniendo en cuenta lo anterior, es necesario precisar en lo siguiente:

        p.header-step.mt-5
            span.header-step-number.text-color-orange 01
            span.header-step-title #[strong Objeto:] elemento que hace parte del sistema y del cual se pueden definir ciertos datos y funcionalidades; de allí se puede inferir que los objetos están compuestos por atributos y métodos, donde los atributos corresponden a dichos datos y los métodos a las funcionalidades mencionadas.
        hr.my-4
        p.header-step
            span.header-step-number.text-color-orange 02
            span.header-step-title #[strong Clase:] es un modelo que almacena la estructura básica de un objeto; es decir, se definen en esta los atributos y métodos que van a componer los objetos.
        hr.my-4
        p.header-step
            span.header-step-number.text-color-orange 03
            span.header-step-title #[strong Instancia:] consiste en cada uno de los objetos creados a partir de una clase.
        
    .bg-brand-color-light.mt-0

        .row
            .col-2.flex-center
                p.text-center.p-4
                    img(src="assets/images/pages/tema-1/icono-ejemplo-t11.svg").img-fluid
            .col-10
                .p-4
                    h3.font-weight-bolder EJEMPLO PRÁCTICO

                    p Para comprender mejor la conceptualización que se acaba de plasmar en cuanto a la programación orientada a objetos, se ilustra el siguiente ejemplo:

                    p.font-weight-lighter.text-monospace Se requiere apoyar la gestión institucional de un centro veterinario generando una solución informática que permita administrar las historias clínicas, el registro de usuarios, de médicos, pacientes, formas de pago y servicios ofrecidos.

    .header-arrow.header-arrow--xs.bg-brand-color-secondary.mt-0

    .jumbotron.bg-white.my-0
        
        p.mt-5 El primer paso consiste entonces en efectuar la abstracción e identificar los componentes que intervienen en la creación de dicho sistema; los objetos podrían ser: historias clínicas, usuarios, médicos, pacientes, formas de pago y servicios ofrecidos; esto teniendo en cuenta que en la descripción del requerimiento, son esas palabras las que hacen alusión a sustantivos y de las cuales se pueden identificar <strong>datos (atributos)</strong> y <strong>comportamientos (métodos)</strong>.

        p En la siguiente figura se observa la abstracción realizada para el ejemplo:

        p.text-center.p-4
            img(src="assets/images/pages/tema-1/clases-ejemplo-t11.svg").img-fluid


    #tema-12.header-ecored
        h2 1.2 Características

    .jumbotron.bg-white

        p Continuando con la teorización respecto a la programación orientada a objetos, es importante asimismo tener claras las características en que se fundamenta, las cuales pueden observarse en siguiente figura:

        p.text-center.my-6
            img(src="assets/images/pages/tema-1/caracteristicas-t11.svg").img-fluid

        p.header-step.mt-5
            span.header-step-number.text-color-orange 01
            span.header-step-title #[strong Abstracción:] como ya se vio en el apartado anterior, la abstracción consiste en el proceso de identificación de los componentes del sistema, que pasan a ser los objetos y a su vez sus características y funcionalidades, reconociendo estas como atributos y métodos.
        hr.my-4
        p.header-step
            span.header-step-number.text-color-orange 02
            span.header-step-title #[strong Herencia:] es el proceso mediante el cual unos objetos mantienen sus propios atributos y funcionalidades, pero también toman atributos o funcionalidades de otros; para comprender mejor, se continúa con el ejemplo del centro veterinario, en donde se identifica una clase que es personas, que sería la clase padre, pero se requiere otra clase denominada médicos, llamada la clase hijos, dado que los veterinarios van a tener atributos y métodos diferentes, por lo tanto heredan algunos atributos y métodos de la clase padre, pero tienen también los suyos propios.
        hr.my-4
        p.header-step
            span.header-step-number.text-color-orange 03
            span.header-step-title #[strong Polimorfismo:] se trata de la característica que permite asignar las mismas instrucciones a diferentes objetos, teniendo en cuenta que cada uno de ellos las va a ejecutar de acuerdo a sus particularidades internas. Para ejemplificarlo, en el sistema del centro veterinario, cuando el médico registra el alta de un paciente que se encuentra hospitalizado, suceden tres cosas: primero se informa a la secretaria para que genere la orden de pago, segundo, se informa en pantalla al veterinario que el alta fue registrada y tercero, se informa al propietario para que recoja al paciente; como puede observarse, en las tres cosas se efectúa la misma acción, la cual es informar internamente a cada uno; esos informes se realizan de manera diferente, pero en realidad se está dando la misma orden a varios objetos.          